(import (scheme base)
	(aeolus cipher)
	(aeolus cipher des)
	(aeolus modes ecb)
	(aeolus modes cbc)
	(aeolus modes parameters)
	(aeolus padding)
	(aeolus padding pkcs)
	(aeolus misc bitwise)
	(aeolus-test))

(test-begin "DES")

(test-assert "cipher?"
	     (cipher? (make-cipher DES #u8(1 2 3 4 5 6 7 8) mode-ecb)))

(test-equal "cipher-blocksize" 8
	    (cipher-blocksize (make-cipher DES #u8(1 2 3 4 5 6 7 8) mode-ecb)))

(define test-vectors
  '(#(#x0000000000000000 #x0000000000000000 #x8CA64DE9C1B123A7)
    #(#xFFFFFFFFFFFFFFFF #xFFFFFFFFFFFFFFFF #x7359B2163E4EDC58)
    #(#x3000000000000000 #x1000000000000001 #x958E6E627A05557B)
    #(#x1111111111111111 #x1111111111111111 #xF40379AB9E0EC533)
    #(#x0123456789ABCDEF #x1111111111111111 #x17668DFC7292532D)
    #(#x1111111111111111 #x0123456789ABCDEF #x8A5AE1F81AB8F2DD)
    #(#x0000000000000000 #x0000000000000000 #x8CA64DE9C1B123A7)
    #(#xFEDCBA9876543210 #x0123456789ABCDEF #xED39D950FA74BCC4)
    #(#x7CA110454A1A6E57 #x01A1D6D039776742 #x690F5B0D9A26939B)
    #(#x0131D9619DC1376E #x5CD54CA83DEF57DA #x7A389D10354BD271)
    #(#x07A1133E4A0B2686 #x0248D43806F67172 #x868EBB51CAB4599A)
    #(#x3849674C2602319E #x51454B582DDF440A #x7178876E01F19B2A)
    #(#x04B915BA43FEB5B6 #x42FD443059577FA2 #xAF37FB421F8C4095)
    #(#x0113B970FD34F2CE #x059B5E0851CF143A #x86A560F10EC6D85B)
    #(#x0170F175468FB5E6 #x0756D8E0774761D2 #x0CD3DA020021DC09)
    #(#x43297FAD38E373FE #x762514B829BF486A #xEA676B2CB7DB2B7A)
    #(#x07A7137045DA2A16 #x3BDD119049372802 #xDFD64A815CAF1A0F)
    #(#x04689104C2FD3B2F #x26955F6835AF609A #x5C513C9C4886C088)
    #(#x37D06BB516CB7546 #x164D5E404F275232 #x0A2AEEAE3FF4AB77)
    #(#x1F08260D1AC2465E #x6B056E18759F5CCA #xEF1BF03E5DFA575A)
    #(#x584023641ABA6176 #x004BD6EF09176062 #x88BF0DB6D70DEE56)
    #(#x025816164629B007 #x480D39006EE762F2 #xA1F9915541020B56)
    #(#x49793EBC79B3258F #x437540C8698F3CFA #x6FBF1CAFCFFD0556)
    #(#x4FB05E1515AB73A7 #x072D43A077075292 #x2F22E49BAB7CA1AC)
    #(#x49E95D6D4CA229BF #x02FE55778117F12A #x5A6B612CC26CCE4A)
    #(#x018310DC409B26D6 #x1D9D5C5018F728C2 #x5F4C038ED12B2E41)
    #(#x1C587F1C13924FEF #x305532286D6F295A #x63FAC0D034D9F793)
    #(#x0101010101010101 #x0123456789ABCDEF #x617B3A0CE8F07100)
    #(#x1F1F1F1F0E0E0E0E #x0123456789ABCDEF #xDB958605F8C8C606)
    #(#xE0FEE0FEF1FEF1FE #x0123456789ABCDEF #xEDBFD1C66C29CCC7)
    #(#x0000000000000000 #xFFFFFFFFFFFFFFFF #x355550B2150E2451)
    #(#xFFFFFFFFFFFFFFFF #x0000000000000000 #xCAAAAF4DEAF1DBAE)
    #(#x0123456789ABCDEF #x0000000000000000 #xD5D44FF720683D0D)
    #(#xFEDCBA9876543210 #xFFFFFFFFFFFFFFFF #x2A2BB008DF97C2F2)
    #(#x7CA110454A1A6E57 #x01A1D6D039776742 #x690F5B0D9A26939B)
    #(#x0131D9619DC1376E #x5CD54CA83DEF57DA #x7A389D10354BD271)
    #(#x07A1133E4A0B2686 #x0248D43806F67172 #x868EBB51CAB4599A)
    #(#x3849674C2602319E #x51454B582DDF440A #x7178876E01F19B2A)
    #(#x04B915BA43FEB5B6 #x42FD443059577FA2 #xAF37FB421F8C4095)
    #(#x0113B970FD34F2CE #x059B5E0851CF143A #x86A560F10EC6D85B)
    #(#x0170F175468FB5E6 #x0756D8E0774761D2 #x0CD3DA020021DC09)
    #(#x43297FAD38E373FE #x762514B829BF486A #xEA676B2CB7DB2B7A)
    #(#x07A7137045DA2A16 #x3BDD119049372802 #xDFD64A815CAF1A0F)
    #(#x04689104C2FD3B2F #x26955F6835AF609A #x5C513C9C4886C088)
    #(#x37D06BB516CB7546 #x164D5E404F275232 #x0A2AEEAE3FF4AB77)
    #(#x1F08260D1AC2465E #x6B056E18759F5CCA #xEF1BF03E5DFA575A)
    #(#x584023641ABA6176 #x004BD6EF09176062 #x88BF0DB6D70DEE56)
    #(#x025816164629B007 #x480D39006EE762F2 #xA1F9915541020B56)
    #(#x49793EBC79B3258F #x437540C8698F3CFA #x6FBF1CAFCFFD0556)
    #(#x4FB05E1515AB73A7 #x072D43A077075292 #x2F22E49BAB7CA1AC)
    #(#x49E95D6D4CA229BF #x02FE55778117F12A #x5A6B612CC26CCE4A)
    #(#x018310DC409B26D6 #x1D9D5C5018F728C2 #x5F4C038ED12B2E41)
    #(#x1C587F1C13924FEF #x305532286D6F295A #x63FAC0D034D9F793)))

(define (des-ecb-test cipher-maker)
  (lambda (vec)
    (let ((key (integer->bytevector (vector-ref vec 0) 8))
	  (plain (integer->bytevector (vector-ref vec 1) 8))
	  (ct (integer->bytevector (vector-ref vec 2) 8)))
      ;; it's ECB so we can reuse it
      (define cipher (cipher-maker key))

      (test-equal (string-append "encrypt: " 
				 (number->string (vector-ref vec 1) 16)
				 " -> "
				 (number->string (vector-ref vec 2) 16))
		  ct
		  (cipher-encrypt cipher plain))
      (test-equal (string-append "decrypt: " 
				 (number->string (vector-ref vec 2) 16)
				 " -> "
				 (number->string (vector-ref vec 1) 16))
		  plain
		  (cipher-decrypt cipher ct)))))

(for-each (des-ecb-test (lambda (key) (make-cipher DES key mode-ecb)))
	  test-vectors)
(for-each (des-ecb-test (lambda (key)
			  ;; do kinda double des
			  (make-cipher DES3 (bytevector-append key key)
				       mode-ecb))) 
			test-vectors)
(for-each (des-ecb-test (lambda (key)
			  ;; do kinda triple des
			  (make-cipher DES3 (bytevector-append key key key)
				       mode-ecb)))
			test-vectors)

;; CBC
;; test vectors are from http://csrc.nist.gov/groups/STM/cavp/
(define cbc-encrypt-test-vector 
  '(;; KEY                IV1                IV2                IV3                PLAIN1             CIPHER1            PLAIN2             CIPHER2            PLAIN3             CIPHER3
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x95f8a5e5dd31d900 #x8000000000000000 #xf7552ab6cb21e2bc #x713d058fe58a43f7 #x5a48d3de869557fd #xe4999d5c3cceee44 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xdd7f121ca5015619 #x4000000000000000 #xe0c2af1ebd89a262 #x0ac760c01e5927ef #xf15ee2019a5b547c #xaccd15b5dde0b5c2 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x2e8653104f3834ea #x2000000000000000 #x05b865a1e49ed109 #x363130ca94da9d8a #x3bee595ef860316a #x69732f3dbb5652b1 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x4bd388ff6cd81d4f #x1000000000000000 #xb447313fc704d321 #x1e14d9109bc1f46c #xf6089ca9b722765c #xace935a115450a05 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x20b9e767b2fb1456 #x0800000000000000 #xc39193d42381b313 #x6a46ef972da6a833 #xaf15a8e9b2c14de5 #xc1b2f69f9a21090d )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x55579380d77138ef #x0400000000000000 #x6a2afdae188494b8 #x330aec7886295181 #x45089186180bd591 #xa8f987e6d0d3af25 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x6cc5defaaf04512f #x0200000000000000 #x1359f4d663a3209c #xe518b154c8b8c8a6 #x280d3ae3a00cfbc9 #x87f0fbcb6b40af68 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0d9f279ba5d87260 #x0100000000000000 #x4a035e6a81d1314b #x8dec119b560a53d0 #xd27eb94e56c3172a #x6aa899298c76715b )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xd9031b0271bd5a0a #x0080000000000000 #x4334b5fe1b7f5320 #xd8807ced29f8f8d1 #xb0555ab990b7e95c #x7f17a4e7532b04f9 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x424250b37c3dd951 #x0040000000000000 #xf41a29e0d31107b4 #xdbe8eba35e2a295b #xf54f2bd8e2eb2bc6 #x5c899d0cf0f8a135 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xb8061b7ecd9a21e5 #x0020000000000000 #xc8eb2e340855325b #xfa5b70d1b836e88d #xd51175259c607fb4 #x726616043a1c0107 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xf15d0f286b65bd28 #x0010000000000000 #xb75847a2f3f2458a #x4be2d4ffa6f22133 #x72ea3aadb569af43 #xba0432be3b5bb6f8 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xadd0cc8d6e5deba1 #x0008000000000000 #xbe433af4c5ae0f97 #xb85a5c395b3a5885 #x9b003151e8602b7d #xe40807ea13dd109e )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xe6d5f82752ad63d1 #x0004000000000000 #xf68101d125e2e284 #x9f65cff48d26c258 #xfc1463bb9bba9e11 #x7851707ef934aa75 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xecbfe3bd3f591a5e #x0002000000000000 #xfa510732fa871094 #x40e8813c718539ac #x65f94c59c59b06e1 #xd51aab52aa37dc8d )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xf356834379d165cd #x0001000000000000 #x458d97a8b6ebd0d7 #x289a7729f22d7703 #xfbcfc086f8111572 #x266e7b0862cf5fc2 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x2b9f982f20037fa9 #x0000800000000000 #xf4169ca3fc6799ed #xa11b556e8c1b26c5 #x68c9e70b9de8db79 #xaedab274b2ef15c9 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x889de068a16f0be6 #x0000400000000000 #xf47b9f01a5ee74e9 #x3683a86916c7b11d #x63fc8ec1421399b8 #x80fbb2539dd96d8f )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xe19e275d846a1298 #x0000200000000000 #xee26a403caca387d #x9f073f4f068f3d0e #x3f1d10e9a1a44a92 #x498437929c6ccf59 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x329a8ed523d71aec #x0000100000000000 #xaf7e5ad1d9f4ecf8 #x07712f196c02eb9b #xe3f663de44003f9b #xc4ebb01e305e41e2 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xe7fce22557d23c97 #x0000080000000000 #xbb04e854f99f6352 #x93f4126615626c01 #xbc2452fd13e00dcc #x82fb4a9ce4c92818 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x12a9f5817ff2d65d #x0000040000000000 #x01f57b1e69290d90 #xb6958170aba384c9 #x4432a11e1c320e7a #x91239239e22f0280 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xa484c3ad38dc9c19 #x0000020000000000 #x8ae9dee849b46527 #x3bb724cf5e35707d #xa1e9e67f13f932b3 #xcc30662b51d40c1a )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xfbe00a8a1ef8ad72 #x0000010000000000 #xcb706efba6b5110e #x9fe1afb876cdb756 #x6fd1d0793c1b7af2 #x8e67cf5371a467a2 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x750d079407521363 #x0000008000000000 #xb8b27d1286bdbb26 #x1db03e2b95785d8a #x3d2c39f9d26b589e #x6e79366486097eba )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x64feed9c724c2faf #x0000004000000000 #x9862c9d770558095 #xea4e26144ada8e2b #xe3a7abc88132ad7d #xce2971055091a1af )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xf02b263b328e2b60 #x0000002000000000 #xa213c5c56fdca139 #x97255bd98b5ed9b3 #x08cd945738a222c8 #x252e33166953cd68 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x9d64555a9a10b852 #x0000001000000000 #xa3bebc0e23ab87f2 #x85a52d6656cf13be #x568fa34d2fc7225e #x39a971317391242b )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xd106ff0bed5255d7 #x0000000800000000 #xc32c19229d84e2b4 #x6965b2633fbe37a8 #x3771887d7266b49d #xd95a7aa0bec4fa7a )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xe1652c6b138c64a5 #x0000000400000000 #xe628ceae5cb3bb34 #x0e8317ae44e3caa0 #xedd6029a6b80a442 #x4dfdcc7a4279b2c0 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xe428581186ec8f46 #x0000000200000000 #x5924454953ad5732 #x567efb50dc99f5dc #x0313da097aec4a43 #x96bb89c941631bed )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xaeb5f5ede22d1a36 #x0000000100000000 #x7cc987f5fb33b813 #x46814855930b3a3f #x91f5b30f015b4a54 #x1c3ba8fbadab9a22 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xe943d7568aec0c5c #x0000000080000000 #x88e3dd1448c4e0ff #xa77142eabd2bd877 #x1e60759f038beec1 #x8fc77798b1692ab2 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xdf98c8276f54b04b #x0000000040000000 #xa49d286e5dfc6143 #x76395f51bdf699db #x97061699383bbfe0 #xace5681dfba69ceb )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xb160e4680f6c696f #x0000000020000000 #xa5206a311e9c2515 #xc3e20437ad6c32b7 #x311f3c96e071f173 #x782058f728c21174 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xfa0752b07d9c4ab8 #x0000000010000000 #xb6e4686a8b957cf2 #x34cfbfca8df5fb9d #x1a6849edcb701b07 #xfc14dafe9d171db5 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xca3a2b036dbc8502 #x0000000008000000 #xaf1200418fd37fdd #xb372320762d438f8 #xfa5b2fa26d03558b #x339189931ada4474 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x5e0905517bb59bcf #x0000000004000000 #x487deccf0fde5b88 #x882402b6dec6675f #xbcaa0b7b7b3464c5 #xc6d1f875363bf7ea )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x814eeb3b91d90726 #x0000000002000000 #x456a1865905ed57d #x69e1758b520187d4 #x3d245b501c6abb74 #x31097d931da2e7bd )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x4d49db1532919c9f #x0000000001000000 #x3e2601fa20895e62 #xab8232a31d78e0fc #x62133d9330e2e86b #x0bff0085bb36e9b0 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x25eb5fc3f8cf0621 #x0000000000800000 #x58da89972266a7e3 #xaeed06b9f51ce37a #x5d7d6bd225890b4d #x5d09a28ee99cb585 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xab6a20c0620d1c6f #x0000000000400000 #xfeaca17e5dd05c87 #x96dc5bd6e0b10d83 #xdb36baba70c3b9af #x46d9a629a0616379 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x79e90dbc98f92cca #x0000000000200000 #x88249b73e99c5ac0 #x55a4cdc28ecf0541 #xa2f5ea90c2179ab4 #xab239da3e3fab21b )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x866ecedd8072bb0e #x0000000000100000 #x5f8add8784cc3174 #x7349bfc7f6461210 #x70470a07cb34e109 #x9331573af5067b09 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x8b54536f2f3e64a8 #x0000000000080000 #xcd8dc942ae2bb175 #x90b4544c9e6ad23b #x659610094ab3824e #x3133eeddd4f2ffec )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xea51d3975595b86b #x0000000000040000 #xcf8442863e68e644 #x2d7e77de47d0dad4 #x26e6223634c857a3 #x408e7d58ba623208 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xcaffc6ac4542de31 #x0000000000020000 #x16952dc89c0acd65 #xb87887b6dddaab6f #xddd0a647be96041f #x0e5b54a5a9cfbed1 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x8dd45a2ddf90796c #x0000000000010000 #x8a4fca2b00c49807 #x8fdec1977d446e54 #x363219d8cec5a9f3 #xb875b2ffa6fea146 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x1029d55e880ec2d0 #x0000000000008000 #xb40225aea121c8d3 #xaedc1e02bd099571 #xbb5710f9dc8dde46 #x1a190ba501176f51 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x5d86cb23639dbea9 #x0000000000004000 #x711c066c13222f1c #x1404bcbe41ce6aa1 #xae527ed311a25ea2 #x863541107db40094 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x1d1ca853ae7c0c5f #x0000000000002000 #x4fb69c832db68026 #x83804ddd1b5cd4fd #xaf94496800a32656 #x0d3834749def9e7a )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xce332329248f3228 #x0000000000001000 #xf24c7444edf1c394 #x5f54383a55d6198a #xc55d7544a1eae274 #xb601d210b21d541b )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x8405d1abe24fb942 #x0000000000000800 #x6be457abc511e87c #xf1c2172a084f656f #x9ba49db251748896 #x50d294abb12450bb )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xe643d78090ca4207 #x0000000000000400 #x6136fefebb0c8118 #x88b53f4066285776 #x3d19267de9c12e7b #x010a1b96b9017a94 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x48221b9937748a23 #x0000000000000200 #xd23a8dfe39c98883 #x4dc3b1bc755eb684 #x5ce84637532650c8 #x15acb37fde2a095a )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xdd7c0bbd61fafd54 #x0000000000000100 #xafe2e34f009924e2 #x45c93fbf9ea29104 #xd43941ab72932bb0 #x7bd2597948ce5bc8 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x2fbc291a570db5c4 #x0000000000000080 #x0adcf552ec1754c6 #xe5c336ae5360d967 #x816c454ba7894865 #xb3f30f939f9bc4db )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xe07c30d7e4e26e12 #x0000000000000040 #xc06e80c5238135bb #x31c1c1914e9d7278 #x74bc744f10f63889 #xd30cbd5808d8e0ef )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0953e2258e8e90a1 #x0000000000000020 #x0912754e7c42f637 #xca1dad0fa1978258 #x3d2565d9bf62cdbd #xb30b208b6ccecada )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x5b711bc4ceebf2ee #x0000000000000010 #xb4f82967c658adb8 #xafd29a3fba18602a #xa2e13c5701a60444 #x027d03f04016c3c2 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xcc083f1e6d9e85f6 #x0000000000000008 #x006fa12a796ac4d3 #xc291dff5ec01e8b3 #xcbe2873fd6f63048 #xc0950b7f3c1bfaca )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #xd2fd8867d50d2dfe #x0000000000000004 #x1a4a364616460d44 #x6491ba623149f3d0 #xcc6adcef1be975ef #x2e475e2153d1c64a )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x06e7ea22ce92708f #x0000000000000002 #xf307b5bcd44f3d8d #x87c6963b33be0353 #x991d770b2bf051dc #xf8f7ded629f3fc48 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x166b40b44aba4bd6 #x0000000000000001 #x9cb1c3932c005c49 #x4fce2baa2cd647d3 #x17d8e9c374d14494 #x776bd1e53ef1d7d6 )
    ))

(define cbc-decrypt-test-vector
  '(;;  KEY               IV1                IV2                IV3                CIPHER             PLAIN1             PLAIN2             PLAIN3                
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x8000000000000000 #x95f8a5e5dd31d900 #xc0adf0b088648c55 #x3f520f4f779b73aa )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x4000000000000000 #xdd7f121ca5015619 #x882a4749f054034c #x77d5b8b60fabfcb3 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x2000000000000000 #x2e8653104f3834ea #x7bd306451a6d61bf #x842cf9bae5929e40 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x1000000000000000 #x4bd388ff6cd81d4f #x1e86ddaa398d481a #xe1792255c672b7e5 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0800000000000000 #x20b9e767b2fb1456 #x75ecb232e7ae4103 #x8a134dcd1851befc )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0400000000000000 #x55579380d77138ef #x0002c6d582246dba #xfffd392a7ddb9245 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0200000000000000 #x6cc5defaaf04512f #x39908baffa51047a #xc66f745005aefb85 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0100000000000000 #x0d9f279ba5d87260 #x58ca72cef08d2735 #xa7358d310f72d8ca )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0080000000000000 #xd9031b0271bd5a0a #x8c564e5724e80f5f #x73a9b1a8db17f0a0 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0040000000000000 #x424250b37c3dd951 #x171705e629688c04 #xe8e8fa19d69773fb )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0020000000000000 #xb8061b7ecd9a21e5 #xed534e2b98cf74b0 #x12acb1d467308b4f )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0010000000000000 #xf15d0f286b65bd28 #xa4085a7d3e30e87d #x5bf7a582c1cf1782 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0008000000000000 #xadd0cc8d6e5deba1 #xf88599d83b08bef4 #x077a6627c4f7410b )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0004000000000000 #xe6d5f82752ad63d1 #xb380ad7207f83684 #x4c7f528df807c97b )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0002000000000000 #xecbfe3bd3f591a5e #xb9eab6e86a0c4f0b #x4615491795f3b0f4 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0001000000000000 #xf356834379d165cd #xa603d6162c843098 #x59fc29e9d37bcf67 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000800000000000 #x2b9f982f20037fa9 #x7ecacd7a75562afc #x813532858aa9d503 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000400000000000 #x889de068a16f0be6 #xddc8b53df43a5eb3 #x22374ac20bc5a14c )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000200000000000 #xe19e275d846a1298 #xb4cb7208d13f47cd #x4b348df72ec0b832 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000100000000000 #x329a8ed523d71aec #x67cfdb8076824fb9 #x9830247f897db046 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000080000000000 #xe7fce22557d23c97 #xb2a9b770028769c2 #x4d56488ffd78963d )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000040000000000 #x12a9f5817ff2d65d #x47fca0d42aa78308 #xb8035f2bd5587cf7 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000020000000000 #xa484c3ad38dc9c19 #xf1d196f86d89c94c #x0e2e6907927636b3 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000010000000000 #xfbe00a8a1ef8ad72 #xaeb55fdf4badf827 #x514aa020b45207d8 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000008000000000 #x750d079407521363 #x205852c152074636 #xdfa7ad3eadf8b9c9 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000004000000000 #x64feed9c724c2faf #x31abb8c927197afa #xce544736d8e68505 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000002000000000 #xf02b263b328e2b60 #xa57e736e67db7e35 #x5a818c91982481ca )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000001000000000 #x9d64555a9a10b852 #xc831000fcf45ed07 #x37cefff030ba12f8 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000800000000 #xd106ff0bed5255d7 #x8453aa5eb8070082 #x7bac55a147f8ff7d )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000400000000 #xe1652c6b138c64a5 #xb430793e46d931f0 #x4bcf86c1b926ce0f )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000200000000 #xe428581186ec8f46 #xb17d0d44d3b9da13 #x4e82f2bb2c4625ec )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000100000000 #xaeb5f5ede22d1a36 #xfbe0a0b8b7784f63 #x041f5f474887b09c )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000080000000 #xe943d7568aec0c5c #xbc168203dfb95909 #x43e97dfc2046a6f6 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000040000000 #xdf98c8276f54b04b #x8acd9d723a01e51e #x7532628dc5fe1ae1 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000020000000 #xb160e4680f6c696f #xe435b13d5a393c3a #x1bca4ec2a5c6c3c5 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000010000000 #xfa0752b07d9c4ab8 #xaf5207e528c91fed #x50adf81ad736e012 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000008000000 #xca3a2b036dbc8502 #x9f6f7e5638e9d057 #x609081a9c7162fa8 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000004000000 #x5e0905517bb59bcf #x0b5c50042ee0ce9a #xf4a3affbd11f3165 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000002000000 #x814eeb3b91d90726 #xd41bbe6ec48c5273 #x2be441913b73ad8c )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000001000000 #x4d49db1532919c9f #x181c8e4067c4c9ca #xe7e371bf983b3635 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000800000 #x25eb5fc3f8cf0621 #x70be0a96ad9a5374 #x8f41f5695265ac8b )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000400000 #xab6a20c0620d1c6f #xfe3f75953758493a #x01c08a6ac8a7b6c5 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000200000 #x79e90dbc98f92cca #x2cbc58e9cdac799f #xd343a71632538660 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000100000 #x866ecedd8072bb0e #xd33b9b88d527ee5b #x2cc464772ad811a4 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000080000 #x8b54536f2f3e64a8 #xde01063a7a6b31fd #x21fef9c58594ce02 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000040000 #xea51d3975595b86b #xbf0486c200c0ed3e #x40fb793dff3f12c1 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000020000 #xcaffc6ac4542de31 #x9faa93f910178b64 #x60556c06efe8749b )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000010000 #x8dd45a2ddf90796c #xd8810f788ac52c39 #x277ef087753ad3c6 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000008000 #x1029d55e880ec2d0 #x457c800bdd5b9785 #xba837ff422a4687a )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000004000 #x5d86cb23639dbea9 #x08d39e7636c8ebfc #xf72c6189c9371403 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000002000 #x1d1ca853ae7c0c5f #x4849fd06fb29590a #xb7b602f904d6a6f5 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000001000 #xce332329248f3228 #x9b66767c71da677d #x649989838e259882 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000000800 #x8405d1abe24fb942 #xd15084feb71aec17 #x2eaf7b0148e513e8 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000000400 #xe643d78090ca4207 #xb31682d5c59f1752 #x4ce97d2a3a60e8ad )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000000200 #x48221b9937748a23 #x1d774ecc6221df76 #xe288b1339dde2089 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000000100 #xdd7c0bbd61fafd54 #x88295ee834afa801 #x77d6a117cb5057fe )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000000080 #x2fbc291a570db5c4 #x7ae97c4f0258e091 #x851683b0fda71f6e )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000000040 #xe07c30d7e4e26e12 #xb5296582b1b73b47 #x4ad69a7d4e48c4b8 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000000020 #x0953e2258e8e90a1 #x5c06b770dbdbc5f4 #xa3f9488f24243a0b )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000000010 #x5b711bc4ceebf2ee #x0e244e919bbea7bb #xf1dbb16e64415844 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000000008 #xcc083f1e6d9e85f6 #x995d6a4b38cbd0a3 #x66a295b4c7342f5c )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000000004 #xd2fd8867d50d2dfe #x87a8dd32805878ab #x785722cd7fa78754 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000000002 #x06e7ea22ce92708f #x53b2bf779bc725da #xac4d40886438da25 )
    #( #x0101010101010101 #x0000000000000000 #x5555555555555555 #xaaaaaaaaaaaaaaaa #x0000000000000001 #x166b40b44aba4bd6 #x433e15e11fef1e83 #xbcc1ea1ee010e17c )
    ))

(define (test-cbc-encrypt cipher-maker)
  (lambda (vec)
    (let ((key (integer->bytevector (vector-ref vec 0) 8))
	  (iv1 (integer->bytevector (vector-ref vec 1) 8))
	  (iv2 (integer->bytevector (vector-ref vec 2) 8))
	  (iv3 (integer->bytevector (vector-ref vec 3) 8))
	  (plain1  (integer->bytevector (vector-ref vec 4) 8))
	  (cipher1 (integer->bytevector (vector-ref vec 5) 8))
	  (plain2  (integer->bytevector (vector-ref vec 6) 8))
	  (cipher2 (integer->bytevector (vector-ref vec 7) 8))
	  (plain3  (integer->bytevector (vector-ref vec 8) 8))
	  (cipher3 (integer->bytevector (vector-ref vec 9) 8)))
      (define c1 (cipher-maker key iv1))
      (define c2 (cipher-maker key iv2))
      (define c3 (cipher-maker key iv3))
      (test-equal "PLAIN1" cipher1 (cipher-encrypt c1 plain1))
      (test-equal "PLAIN2" cipher2 (cipher-encrypt c2 plain2))
      (test-equal "PLAIN3" cipher3 (cipher-encrypt c3 plain3)))))
  
(define DES-CBC (lambda (key iv)
		  (make-cipher DES key mode-cbc (make-iv-paramater iv))))
;; emulate des2 and des3 (well, it's kinda useless though...)
(define DES2-CBC (lambda (key iv)
		  (make-cipher DES3 (bytevector-append key key)
			       mode-cbc (make-iv-paramater iv))))
(define DES3-CBC (lambda (key iv)
		  (make-cipher DES3 (bytevector-append key key key)
			       mode-cbc (make-iv-paramater iv))))
(for-each (test-cbc-encrypt DES-CBC) cbc-encrypt-test-vector)
(for-each (test-cbc-encrypt DES2-CBC) cbc-encrypt-test-vector)
(for-each (test-cbc-encrypt DES3-CBC) cbc-encrypt-test-vector)

(define (test-cbc-decrypt cipher-maker)
  (lambda (vec)
    (let ((key (integer->bytevector (vector-ref vec 0) 8))
	  (iv1 (integer->bytevector (vector-ref vec 1) 8))
	  (iv2 (integer->bytevector (vector-ref vec 2) 8))
	  (iv3 (integer->bytevector (vector-ref vec 3) 8))
	  (cipher1  (integer->bytevector (vector-ref vec 4) 8))
	  (plain1 (integer->bytevector (vector-ref vec 5) 8))
	  (plain2 (integer->bytevector (vector-ref vec 6) 8))
	  (plain3 (integer->bytevector (vector-ref vec 7) 8)))
      (define c1 (cipher-maker key iv1))
      (define c2 (cipher-maker key iv2))
      (define c3 (cipher-maker key iv3))
      (test-equal "CIPHER1" plain1 (cipher-decrypt c1 cipher1))
      (test-equal "CIPHER2" plain2 (cipher-decrypt c2 cipher1))
      (test-equal "CIPHER3" plain3 (cipher-decrypt c3 cipher1)))))

(for-each (test-cbc-decrypt DES-CBC)  cbc-decrypt-test-vector)
(for-each (test-cbc-decrypt DES2-CBC) cbc-decrypt-test-vector)
(for-each (test-cbc-decrypt DES3-CBC) cbc-decrypt-test-vector)

;; padding
(let ((cipher (make-cipher DES #u8(1 2 3 4 5 6 7 8) mode-ecb
			   (make-padding-parameter pkcs5-paddings))))
  (cipher-encrypt cipher (string->utf8 "test"))
  (test-assert "non blocksize" (cipher-encrypt cipher (string->utf8 "test")))
  (test-equal "non blocksize" 
	      "test"
	      (utf8->string
	       (cipher-decrypt cipher
			       (cipher-encrypt cipher (string->utf8 "test"))))))

(test-end)
